/******************************************************************

Stylesheet: Mixins Stylesheet

******************************************************************/
/*************************
MEDIA QUERY (MQ)
*************************/
@import 'breakpoint';

/**************************
RESPONSIVE RATIO
**************************/
@mixin ratio($x, $y, $pseudo: false) {
    $padding: unquote($y / $x * 100 + '%');

    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);

            width: 100%;
            padding-top: $padding;
        }
    }
    @else {
        padding-top: $padding;
    }
}

/*************************
PADDINGS
*************************/
// gutter padding
@mixin side-gutters {
    padding-left: $col-vw !important;
    padding-right: $col-vw !important;

    @include breakpoint($tablet-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }


    @include breakpoint($mobile-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }
}

@mixin lrg-side-gutters {
    padding-left: ($col-vw * 2) !important;
    padding-right: ($col-vw * 2) !important;

    @include breakpoint($laptop-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }


    @include breakpoint($mobile-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }
}

@mixin x-lrg-side-gutters {
    padding-left: ($col-vw * 3) !important;
    padding-right: ($col-vw * 3) !important;

    @include breakpoint($tablet-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }


    @include breakpoint($mobile-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }
}

@mixin xx-lrg-side-gutters {
    padding-left: ($col-vw * 4) !important;
    padding-right: ($col-vw * 4) !important;

    @include breakpoint($tablet-break) {
        padding-left: ($col-vw * 2) !important;
        padding-right: ($col-vw * 2) !important;
    }


    @include breakpoint($mobile-break) {
        padding-left: $col-vw !important;
        padding-right: $col-vw !important;
    }
}

// padding top
@mixin padding-top($pad) {
    padding-top: $pad !important;

    @include breakpoint($tablet-break) {
        padding-top: ($pad * 1.5) !important;
    }


    @include breakpoint($mobile-break) {
        padding-top: ($pad * 2) !important;
    }
}

// padding bottom
@mixin padding-bottom($pad) {
    padding-bottom: $pad !important;

    @include breakpoint($tablet-break) {
        padding-bottom: ($pad * 1.5) !important;
    }


    @include breakpoint($mobile-break) {
        padding-bottom: ($pad * 2) !important;
    }
}

// margin top
@mixin margin-top($margin) {
    margin-top: $margin !important;

    @include breakpoint($tablet-break) {
        margin-top: ($margin * 1.5) !important;
    }


    @include breakpoint($mobile-break) {
        margin-top: ($margin * 2) !important;
    }
}

// margin bottom
@mixin margin-bottom($margin) {
    margin-bottom: $margin !important;

    @include breakpoint($tablet-break) {
        margin-bottom: ($margin * 1.5) !important;
    }


    @include breakpoint($mobile-break) {
        margin-bottom: ($margin * 2) !important;
    }
}

/*************************
COLORS
*************************/
@mixin colors {
    &.color1 {
        color: $color1 !important;
    }

    &.color2 {
        color: $color2 !important;
    }

    &.color3 {
        color: $color3 !important;
    }

    &.dark-grey {
        color: $color4 !important;
    }

    &.color5 {
        color: $color5 !important;
    }

    &.color6 {
        color: $color6 !important;
    }

    &.white {
        color: $white !important;
    }
}

@mixin background-colors {
    &.bg-color1 {
        background-color: $color1 !important;
    }

    &.bg-color2 {
        background-color: $color2 !important;
    }

    &.bg-color3 {
        background-color: $color3 !important;
    }

    &.bg-color4 {
        background-color: $color4 !important;
    }

    &.bg-color5 {
        background-color: $color5 !important;
    }

    &.bg-color6 {
        background-color: $color6 !important;
    }

    &.bg-color6 {
        background-color: $color6 !important;
    }

    &.bg-white {
        background-color: $white !important;
    }
}

@mixin paddings {
    &.top {
        @include padding-top($col-vw);
    }

    &.bottom {
        @include padding-bottom($col-vw);
    }

    &.left {
        padding-left: $col-vw !important;
    }

    &.right {
        padding-right: $col-vw !important;
    }

    &.top-half {
        @include padding-top($col-vw / 2);
    }

    &.bottom-half {
        @include padding-bottom($col-vw / 2);
    }

    &.top-third {
        @include padding-top($col-vw / 3);
    }

    &.bottom-third {
        @include padding-bottom($col-vw / 3);
    }

    &.left-half {
        padding-left: ($col-vw / 2) !important;

        @include breakpoint($tablet-break) {
            padding-left: $col-vw !important;
        }
    }

    &.right-half {
        padding-right: ($col-vw / 2) !important;

        @include breakpoint($tablet-break) {
            padding-right: $col-vw !important;
        }
    }
}

@mixin gutters {
    &.gutters {
        @include side-gutters;
    }

    &.lrg-gutters {
        @include lrg-side-gutters;
    }

    &.x-lrg-gutters {
        @include x-lrg-side-gutters;
    }

    &.xx-lrg-gutters {
        @include xx-lrg-side-gutters;
    }
}

@mixin h-lrg-padding {
    &.top {
        padding-top: 3rem;

        @include breakpoint($laptop-break) {
            padding-top: 2.5rem;
        }


        @include breakpoint($tablet-break) {
            padding-top: 2.167rem;
        }
    }

    &.bottom {
        padding-bottom: 4rem;

        @include breakpoint($laptop-break) {
            padding-bottom: 3.643rem;
        }


        @include breakpoint($tablet-break) {
            padding-bottom: 3.167rem;
        }
    }
}

@mixin h-med-padding {
    &.bottom {
        padding-bottom: 2.125rem;

        @include breakpoint($laptop-break) {
            padding-bottom: 1.857rem;
        }


        @include breakpoint($tablet-break) {
            padding-bottom: 1.5rem;
        }


        @include breakpoint($mobile-break) {
            padding-bottom: 1.083rem;
        }
    }

    &.top {
        padding-top: 2.125rem;

        @include breakpoint($laptop-break) {
            padding-top: 1.857rem;
        }


        @include breakpoint($tablet-break) {
            padding-top: 1.5rem;
        }


        @include breakpoint($mobile-break) {
            padding-top: 1.083rem;
        }
    }
}

@mixin button-margin {
    &.bottom {
        margin-bottom: 2.75rem;

        @include breakpoint($laptop-break) {
            margin-bottom: 2.571rem;
        }


        @include breakpoint($tablet-break) {
            margin-bottom: 2.333rem;
        }


        @include breakpoint($mobile-break) {
            margin-bottom: 1.5rem;
        }
    }

    &.top {
        margin-top: 2.75rem;

        @include breakpoint($laptop-break) {
            margin-top: 2.571rem;
        }


        @include breakpoint($tablet-break) {
            margin-top: 2.333rem;
        }


        @include breakpoint($mobile-break) {
            margin-top: 1.5rem;
        }
    }
}

/*********************************
BACKGROUND IMAGES
*********************************/
@mixin bg-cc {
    background-size: cover !important;
    background-position: center !important;
}

/*********************************
SVG BACKGROUND IMAGE WITH FALLBACK
*********************************/
$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';

@mixin background-image($name, $size: false) {
    background-image: url('#{$image-path}/#{$name}.svg');

    @if $size {
        background-size: $size;
    }

    .no-svg & {
        background-image: url('#{$image-path}/#{$name}.#{$fallback-extension}');

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3 / 2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
            background-image: url('#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension}');
        }
    }
}

/* USAGE
.lb_div {
    @include background-image('bg');
}
** must have bg.svg, bg.png & bg@2x.png
*/


// MDC GRID

@import 'variables'

// returns the lower grid boundary or null if the smallest grid is selected
@function mdc-layout-grid-breakpoint-min($size) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }
  $min: map-get($mdc-layout-grid-breakpoints, $size);

  @return if($min > 0, $min, null);
}

// returns the upper grid boundary or null if the largest grid is selected
@function mdc-layout-grid-breakpoint-max($size) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }
  $names: map-keys($mdc-layout-grid-columns);
  $n: index($names, $size);
  $prev: if($n > 1, nth($names, $n - 1), null);

  @return if($prev, (mdc-layout-grid-breakpoint-min($prev) - 1px), null);
}

// Private mixins, meant for internal use.
@mixin mdc-layout-grid-media-query_($size) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  $min: mdc-layout-grid-breakpoint-min($size);
  $max: mdc-layout-grid-breakpoint-max($size);

  @if $min == null and $max != null {
    // Phone
    @media (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max != null {
    // Tablet
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max == null {
    // Desktop
    @media (min-width: $min) {
      @content;
    }
  } @else {
    // Fallback - no breakpoints defined
    @content;
  }
}

@mixin mdc-layout-grid-cell-span_($size, $span, $gutter) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  $percent: percentage($span / map-get($mdc-layout-grid-columns, $size));

  @if $percent > 100% {
    $percent: 100%;
  }

  width: calc(#{$percent} - #{$gutter});
  width: calc(#{$percent} - var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}));

  @supports (display: grid) {
    width: auto;
    grid-column-end: span min($span, map-get($mdc-layout-grid-columns, $size));
  }
}

// Public mixins, meant for developer usage.
@mixin mdc-layout-grid($size, $margin, $max-width: null) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  box-sizing: border-box;
  margin: 0 auto;
  padding: $margin;
  padding: var(--mdc-layout-grid-margin-#{$size}, #{$margin});

  @if $max-width {
    max-width: $max-width;
  }
}

@mixin mdc-layout-grid-inner($size, $margin, $gutter) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  display: flex;
  flex-flow: row wrap;
  align-items: stretch;
  margin: -$gutter / 2;
  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2 * -1);

  @supports (display: grid) {
    display: grid;
    margin: 0;
    grid-gap: $gutter;
    grid-gap: var(--mdc-layout-grid-gutter-#{$size}, $gutter);
    grid-template-columns: repeat(map-get($mdc-layout-grid-columns, $size), minmax(0, 1fr));
  }
}

@mixin mdc-layout-grid-cell($size, $default-span, $gutter) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  @include mdc-layout-grid-cell-span_($size, $default-span, $gutter);

  box-sizing: border-box;
  margin: $gutter / 2;
  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2);

  @supports (display: grid) {
    margin: 0;
  }
}

@mixin mdc-layout-grid-cell-order($order) {
  order: $order;
}

@mixin mdc-layout-grid-cell-align($position) {
  @if $position == "top" {
    align-self: flex-start;

    @supports (display: grid) {
      align-self: start;
    }
  }

  @if $position == "middle" {
    align-self: center;
  }

  @if $position == "bottom" {
    align-self: flex-end;

    @supports (display: grid) {
      align-self: end;
    }
  }

  @if $position == "stretch" {
    align-self: stretch;
  }
}

@mixin mdc-layout-grid-fixed-column-width($size, $margin, $gutter, $column-width) {
  @if not map-has-key($mdc-layout-grid-columns, $size) {
    @error "Invalid style specified! Choose one of #{map-keys($mdc-layout-grid-columns)}";
  }

  $columnCount: map-get($mdc-layout-grid-columns, $size);
  $gutter-number: $columnCount - 1;
  $margin-number: 2;

  width: $column-width * $columnCount + $gutter * $gutter-number + $margin * $margin-number;
  width:
    calc(
      var(--mdc-layout-grid-column-width-#{$size}, #{$column-width}) * #{$columnCount} +
      var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) * #{$gutter-number} +
      var(--mdc-layout-grid-margin-#{$size}, #{$margin}) * #{$margin-number}
    );
}